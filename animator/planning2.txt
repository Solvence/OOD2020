Changes made (don't forget to say why in README):
-Create Color class
-Create Abstract shape and abstracted duplicate code and fields
Fix BasicAnimatedObject constructor to when given a list of commands, check that building a new
BasicAnimatedObject with these commands is valid.
-changed getAnimatedObjects method in main model to two separate methods: getCommands and getNames
- With the new assumptions..., we merged all of our separate ChangeColor, ChangeSize, and Move
  command classes into one that handles all types of changes (deleted methods sameType and
  applicable)

Assumptions:
- A valid input will have inputted commands that will specify all fields (color, size, position)
    - commands cannot overlap time intervals
    - start of a command must equal the end time of the command before it, if there is one
    - commands are inputted in order of start time
- The minimum valid start tick is 1

AnimatedObject -
  - changed addCommand to work with new invariants.

AnimatedObjectCommands -
  - keyframes are allowed at beginning or end of other commands

Shapes -
  - Add default empty constructor to shapes

In Model Interface:
  - Create two new getters getNames() (get all the names of objects in animation) & getCommandsForShape(String name) which will get commands for shape with given name.
  - Get rid of getAnimatedObject as it may reveal too much information which the user wont always need to know.
  - Make getShapesAt -> getShapeAt(String name, int time) as we may not always need to get all the shapes at a given time.
  - add getCanvas() method



In BasicTextualView:
Change two string to go threw names of animated objects instead of animatedObjects itself
use getNames and getCommands(String name)
View Interface:
timer, set timer, convert, 
-convert   (ticks -> time interval) maybe
-render

TextualView:
-instead of putting ticks, translate ticks to actual time based on tempo

VisualView (uses Java Swing):
- create base canvas
- render full animation

SVGView:

Builder:

TODO:
- Look over past lectures on views, etc.
- Finish implementing BasicCommand
- null Shape constructor
- finish implementing canvas in
- fix width and height to Dimension2D
- Teleportation can happen! Piazza @1450
- figure out viewbox stuff for svg
- Think about abstraction and if we need all five animates every time
- visibility in svg view
- hasFinishedRendering() method that returns a boolean. VisualView itself will update the time.

Ask in oh:
- is our visitor design good?
- abstraction?
- abstraction between views
- all five animates every time




Clarify:
- drawing on negative positions
- getting all essential times for an object or getting all commands for an object