


AnimationModel
-Hashmap<String, Animated>
Methods:
void create(String name, Shape s)
-render(time) // def need time here
void move(String s, int startTime, int endTime, Position end) throws IAE [if interval overlaps with another, or if shape doesnt]
-changeColor(String s, int startTime, int endTime, Color endColor)
-changeSize(...)

Animated object
-Shape field
-commands field
-render
-addcommand
-runcommand
-update

Shape object
-size
-position
-color

interface AnimationObjectCommand
-class changeSize 
-class changeColor
-class move
-canCall

Invariants:
- time cant be negative
- endTime > startTime
- AnimatedObjects commands is always sorted by startTime

Things to consider:
- we used java.awt for Colors despite Amit's warning against it
- We decided to allow the width/height of a Shape to be 0
- Right now, when Shapes are created we require the initial position, color, and size to be
  inputted. This may require much stress on the controller to determine the initial state.
- We don't allow overlap within the same type of command (e.g. moving x-coord from t=1-10 and
  moving y-coord from t=5-15)
- Our textual view just goes through the intervals of commands, while it's supposed to represent
  a textual view of an animation (that should maybe call getStateAt at every frame?)
- Perhaps we should use a visitor to couple the model to the view for drawing shapes: a shape
  (let's say a square) has a render method that would take in a view and call
  view.renderSquare(this)

Questions:
- should we actually have a getAnimatedObjects method in the model? I'm thinking maybe just a
  getShapeNames method would be better design...

TODO:
- document invariants before constructors
- creation outputs in view, probably want the key (bar with w, h, x, y, ...) too
- make sure the builder/factory implementations are correct

TODO Later:
- change Color references in model to not use java.awt


